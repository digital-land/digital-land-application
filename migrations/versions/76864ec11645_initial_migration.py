"""initial migration

Revision ID: 76864ec11645
Revises:
Create Date: 2025-02-04 16:39:45.780725

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '76864ec11645'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('reference', sa.String(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('reference', name='pk_category')
    )
    op.create_table('organisation',
    sa.Column('organisation', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('local_authority_type', sa.Text(), nullable=True),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('organisation', name='pk_organisation')
    )
    op.create_table('specification',
    sa.Column('specification', sa.String(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('specification', name='pk_specification')
    )
    op.create_table('category_value',
    sa.Column('prefix', sa.Text(), nullable=False),
    sa.Column('reference', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('category_reference', sa.String(), nullable=False),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['category_reference'], ['category.reference'], name='fk_category_category_value'),
    sa.PrimaryKeyConstraint('prefix', 'reference', name='pk_category_value')
    )
    op.create_table('dataset',
    sa.Column('dataset', sa.String(), nullable=False),
    sa.Column('parent', sa.String(), nullable=True),
    sa.Column('specification_id', sa.String(), nullable=True),
    sa.Column('is_geography', sa.Boolean(), nullable=False),
    sa.Column('entity_minimum', sa.BigInteger(), nullable=True),
    sa.Column('entity_maximum', sa.BigInteger(), nullable=True),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['parent'], ['dataset.dataset'], name='fk_dataset_self_parent'),
    sa.ForeignKeyConstraint(['specification_id'], ['specification.specification'], name='fk_specification_dataset'),
    sa.PrimaryKeyConstraint('dataset', name='pk_dataset')
    )
    op.create_table('field',
    sa.Column('field', sa.String(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('cardinality', sa.Text(), nullable=True),
    sa.Column('parent_field', sa.Text(), nullable=True),
    sa.Column('category_reference', sa.Text(), nullable=True),
    sa.Column('datatype', sa.Text(), nullable=True),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['category_reference'], ['category.reference'], name='fk_categoryÙ€field'),
    sa.PrimaryKeyConstraint('field', name='pk_field')
    )
    op.create_table('dataset_field',
    sa.Column('dataset', sa.Text(), nullable=False),
    sa.Column('field', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['dataset'], ['dataset.dataset'], name='fk_dataset_dataset_field'),
    sa.ForeignKeyConstraint(['field'], ['field.field'], name='fk_field_dataset_field'),
    sa.PrimaryKeyConstraint('dataset', 'field', name='pk_dataset_field')
    )
    op.create_table('record',
    sa.Column('entity', sa.BigInteger(), nullable=False),
    sa.Column('dataset_id', sa.String(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('reference', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('organisation_id', sa.Text(), nullable=True),
    sa.Column('organisation_ids', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('owning_record_entity', sa.BigInteger(), nullable=True),
    sa.Column('owning_record_dataset', sa.Text(), nullable=True),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.dataset'], ),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisation.organisation'], name='fk_organisation_record'),
    sa.ForeignKeyConstraint(['owning_record_entity', 'owning_record_dataset'], ['record.entity', 'record.dataset_id'], name='fk_record_self_owning_record', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('entity', 'dataset_id', name='pk_record')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('record')
    op.drop_table('dataset_field')
    op.drop_table('field')
    op.drop_table('dataset')
    op.drop_table('category_value')
    op.drop_table('specification')
    op.drop_table('organisation')
    op.drop_table('category')
    # ### end Alembic commands ###
